apply plugin: 'java'
apply plugin: 'eclipse'

sourceCompatibility = 1.7
version = '1.0'

ext {
	aetherVersion = "1.13.1"
	wagonVersion = "2.4"
	mavenVersion = "3.0.5"
	log4jVersion = "2.0-beta4"
	
	mainClassName = "com.bennavetta.util.tycho.Main"
}

repositories {
    mavenCentral()
}

configurations {
	compile.exclude module: "google-collections" // replaced by Guava
	compile.exclude groupId: "log4j", module: "log4j" // don't use log4j 1.x
	compile.exclude module: "commons-logging-api" // seems to duplicate commons-logging
	log4j
	tattletale
}

dependencies {
	
	// Bnd to generate MANIFEST.MF
    compile "biz.aQute:bnd:1.50.0"
	
	// Guava
	compile "com.google.guava:guava:14.0.1"
	
	// Aether
	[
		"aether-api",
		"aether-spi",
		"aether-util",
		"aether-impl",
		"aether-connector-file",
		"aether-connector-asynchttpclient"
	].each {
		compile "org.sonatype.aether:$it:${aetherVersion}"
	}
	
	// Log4j 2
	compile "org.apache.logging.log4j:log4j-core:$log4jVersion"
	compile "org.apache.logging.log4j:log4j-api:$log4jVersion"
	compile "org.apache.logging.log4j.adapters:log4j-jcl:$log4jVersion"
	compile "org.apache.logging.log4j.adapters:log4j-slf4j-impl:$log4jVersion"
	
	compile "org.jdom:jdom2:2.0.4"
	compile "args4j:args4j:2.0.23"
	
	// Maven Aether implementation
	compile"org.apache.maven:maven-aether-provider:$mavenVersion"
	
	compile "org.apache.maven:maven-model:$mavenVersion"
	compile "org.apache.maven:maven-model-builder:$mavenVersion"
	
	compile "org.codehaus.plexus:plexus-container-default:1.5.5"
	
    testCompile group: 'junit', name: 'junit', version: '4.+'
	
	// build tools
	log4j "org.apache.logging.log4j:log4j-core:$log4jVersion"
	tattletale "org.jboss.tattletale:tattletale:1.2.0.Beta2"
}

uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}

task distJar(type:Jar, dependsOn:classes) {
	archiveName = "${baseName}-${version}.dist.jar"
	manifest {
		attributes "Main-Class": mainClassName,
			'Implementation-Version': version,
			'Dist-Jar': archiveName 
	}
	
	from(configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }) {
		exclude "META-INF/*.SF"
		exclude "META-INF/*.DSA"
		exclude "META-INF/*.RSA"
	}
	
	from sourceSets.main.output.resourcesDir
	from sourceSets.main.output.classesDir
}

task createTattletaleProperties {
	ext.props = [reports:"*", enableDot:"true"]
	ext.destFile = new File(buildDir, "tattletale.properties")
	inputs.properties props
	outputs.file destFile
	doLast {
		def properties = new Properties()
		properties.putAll(props)
		destFile.withOutputStream { os ->
			properties.store(os, null)
		}
	}
}

task tattletale(type: JavaExec, dependsOn: [createTattletaleProperties, jar]) {
	ext.outputDir = new File(buildDir, "reports/tattletale")
	outputs.dir outputDir
	inputs.files configurations.runtime.files
	inputs.file jar.archivePath
	doFirst {
		outputDir.mkdirs()
	}
	main = "org.jboss.tattletale.Main"
	classpath = configurations.tattletale
	systemProperties "jboss-tattletale.properties": createTattletaleProperties.destFile
	args([configurations.runtime.files, jar.archivePath].flatten().join("#"))
	args outputDir
}

task preloadPlugins(type: JavaExec) {
	main = "org.apache.logging.log4j.core.config.plugins.PluginManager"
	classpath = configurations.log4j
	args sourceSets.main.output.resourcesDir
	args "com.bennavetta.util.tycho.cli.logging"
}
preloadPlugins.inputs.dir sourceSets.main.java.srcDirs
preloadPlugins.outputs.dir sourceSets.main.output.resourcesDir
processResources.dependsOn preloadPlugins

artifacts {
	archives distJar
}

task wrapper(type: Wrapper) {
	gradleVersion = "1.5"
}
